import { createSlice } from '@reduxjs/toolkit';

// Function to load the saved tasks from localStorage
const loadState = () => {
  try {
    // Get the serialized state from localStorage
    const serializedState = localStorage.getItem('tasks');
    // If state exists, parse and return it, otherwise return an empty array
    return serializedState ? JSON.parse(serializedState) : [];
  } catch (err) {
    // If there's an error (e.g., JSON parsing error), return an empty array
    return [];
  }
};

// Function to save the current state to localStorage
const saveState = (state) => {
  try {
    // Serialize the state to a JSON string
    const serializedState = JSON.stringify(state);
    // Save the serialized state to localStorage
    localStorage.setItem('tasks', serializedState);
  } catch (err) {
    // If there's an error, show an alert (for debugging purposes)
    alert(err);
  }
};

// Define the initial state, loading tasks from localStorage
const initialState = {
  tasks: loadState(),
};

// Create a Redux slice for task management
const taskSlice = createSlice({
  name: 'tasks',
  initialState,
  reducers: {
    // Reducer to add a task
    addTask: (state, action) => {
      // Push the new task into the tasks array
      state.tasks.push(action.payload);
      // Save the updated state to localStorage
      saveState(state.tasks);
    },
    // Reducer to delete a task
    deleteTask: (state, action) => {
      // Filter out the task that needs to be deleted by its id
      state.tasks = state.tasks.filter(task => task.id !== action.payload);
      // Save the updated state to localStorage
      saveState(state.tasks);
    },
    // Reducer to edit a task
    editTask: (state, action) => {
      const { id, text } = action.payload;
      // Find the task to edit by its id
      const task = state.tasks.find(task => task.id === id);
      if (task) {
        // Update the task text
        task.text = text;
      }
      // Save the updated state to localStorage
      saveState(state.tasks);
    },
    // Reducer to toggle the completed status of a task
    toggleTask: (state, action) => {
      // Find the task to toggle by its id
      const task = state.tasks.find(task => task.id === action.payload);
      if (task) {
        // Toggle the completed status
        task.completed = !task.completed;
      }
      // Save the updated state to localStorage
      saveState(state.tasks);
    },
  },
});

// Export the actions generated by createSlice
export const { addTask, deleteTask, editTask, toggleTask } = taskSlice.actions;

// Export the reducer to be used in the store
export default taskSlice.reducer;
